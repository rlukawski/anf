import { AuthorizeDeviceWithProvidersPO } from "./AuthorizeDeviceWithProviders.po";

import { tokenMockNetworkErrorHandlers } from '../api-retry/token.mock'
import { setupMockServer } from "api/mock/mock.server";
import { MockLogger } from "../logger/Logger.mock";

describe('AuthorizeDevice (Errors)', () => {
  // ðŸ”¥ osadzamy handlery, ktÃ³re rzucajÄ… network error
  // w ten sposÃ³b testujemy integracyjnie czy UI wyÅ›wietla bÅ‚Ä™dy
  setupMockServer(...tokenMockNetworkErrorHandlers)

  it('should display error page if connection is broken during allow once', async () => {
    // given
    const mockLogger = new MockLogger()
    const authorizeDevicePO = AuthorizeDeviceWithProvidersPO.renderWithProviders(mockLogger)

    // then
    await authorizeDevicePO.expectTextDisplayed("Nieznane urzÄ…dzenie")

    // when
    authorizeDevicePO.clickChooseAllowOnceButton()

    // ðŸ”¥ dziÄ™ki `msw` mockujemy bardzo konkretny bÅ‚Ä…d
    // then
    await authorizeDevicePO.expectTextDisplayed("Internet connection error. Check your wires!")
  });

  it('should display error page if connection is broken during add device', async () => {
    // given
    const mockLogger = new MockLogger()
    const authorizeDevicePO = AuthorizeDeviceWithProvidersPO.renderWithProviders(mockLogger)

    // when
    authorizeDevicePO.clickChooseAddDeviceButton()

    // then
    await authorizeDevicePO.expectTextDisplayed("Zapisz to urzÄ…dzenie jako zaufane")

    // when
    authorizeDevicePO.confirmAddDeviceName("mÃ³j komputerek")

    // then
    await authorizeDevicePO.expectTextDisplayed("Internet connection error. Check your wires!")
  });
});
